155. 最小栈
设计一个支持 push，pop，top 操作，并能在常数时间内检索到最小元素的栈。

push(x) -- 将元素 x 推入栈中。
pop() -- 删除栈顶的元素。
top() -- 获取栈顶元素。
getMin() -- 检索栈中的最小元素。
示例:

MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin();   --> 返回 -3.
minStack.pop();
minStack.top();      --> 返回 0.
minStack.getMin();   --> 返回 -2.




class MinStack {
    Stack<Integer> stack =new Stack<>();
    Stack<Integer> minStack =new Stack<>();
    int min=Integer.MAX_VALUE;
    /** initialize your data structure here. */
    public MinStack() {

    }
    
    public void push(int x) {
        stack.push(x);
        min = Math.min(min,x);
        minStack.push(min);

    }
    
    public void pop() {
            stack.pop();
            minStack.pop();
        min = minStack.empty()?Integer.MAX_VALUE:minStack.peek();
    }
    
    public int top() {
        return stack.peek();

    }
    
    public int getMin() {
        return minStack.peek();
    }
}





 附加另一个由链表实现的英文leetcode解法
 class MinStack {
    Stack<Integer> stack =new Stack<>();
    Stack<Integer> minStack =new Stack<>();
    int min=Integer.MAX_VALUE;
    /** initialize your data structure here. */
    public MinStack() {

    }
    
    public void push(int x) {
        stack.push(x);
        min = Math.min(min,x);
        minStack.push(min);

    }
    
    public void pop() {
            stack.pop();
            minStack.pop();
        min = minStack.empty()?Integer.MAX_VALUE:minStack.peek();
    }
    
    public int top() {
        return stack.peek();

    }
    
    public int getMin() {
        return minStack.peek();
    }
}

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(x);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */
