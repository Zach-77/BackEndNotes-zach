594. 最长和谐子序列
和谐数组是指一个数组里元素的最大值和最小值之间的差别正好是1。

现在，给定一个整数数组，你需要在所有可能的子序列中找到最长的和谐子序列的长度。

示例 1:

输入: [1,3,2,2,5,2,3,7]
输出: 5
原因: 最长的和谐数组是：[3,2,2,2,3].



class Solution {
    public int findLHS(int[] nums) {
        int length=nums.length;
        Map<Integer,Integer> map =new HashMap<>(length);
        for(int i:nums){
            if(map.containsKey(i)){
                int refresh = map.get(i)+1;
                map.put(i,refresh);
            }
            else map.put(i,1);
        }
        int max=0;
        for(Map.Entry<Integer,Integer> entry:map.entrySet()){
            int smaller=entry.getValue();
            int k=entry.getKey();
            if(map.containsKey(k+1) && smaller + map.get(k+1) > max){
                max=smaller+map.get(k+1);
            }
        }
        return max;
        
    }
}






另一种更简洁的表达
/********************************/
public int findLHS(int[] nums) {
    Map<Integer, Integer> countForNum = new HashMap<>();
    for (int num : nums) {
        countForNum.put(num, countForNum.getOrDefault(num, 0) + 1);
    }
    int longest = 0;
    for (int num : countForNum.keySet()) {
        if (countForNum.containsKey(num + 1)) {
            longest = Math.max(longest, countForNum.get(num + 1) + countForNum.get(num));
        }
    }
    return longest;
}
